from aiogram import Router, F, types
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from sqlalchemy.future import select
from sqlalchemy.orm import selectinload
import re

from bot.database.db import SessionLocal
from bot.database.models import Referral, ReferralLink, ReferralInvite
from bot.states.admin_states import AdminStates

router = Router()

def is_valid_http_url(url: str) -> bool:
    return re.match(r"^https?://", url.strip()) is not None


@router.callback_query(F.data == "webmaster_links")
async def choose_webmaster_for_links(callback: CallbackQuery):
    async with SessionLocal() as session:
        result = await session.execute(select(Referral))
        webmasters = result.scalars().all()

    if not webmasters:
        await callback.message.answer("üì≠ –°–ø–∏—Å–æ–∫ –≤–µ–±–º–∞—Å—Ç–µ—Ä–æ–≤ –ø—É—Å—Ç.")
        return await callback.answer()

    # –ö–Ω–æ–ø–∫–∏ —Å –≤–µ–±–º–∞—Å—Ç–µ—Ä–∞–º–∏
    kb_rows = [
        [InlineKeyboardButton(text=f"{wm.tag}", callback_data=f"wm_links:{wm.id}")]
        for wm in webmasters
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    kb_rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="webmaster_menu")])

    kb = InlineKeyboardMarkup(inline_keyboard=kb_rows)

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ–±–º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Å—ã–ª–æ–∫:", reply_markup=kb)
    await callback.answer()



@router.callback_query(F.data.startswith("wm_links:"))
async def show_links_for_webmaster(callback: CallbackQuery):
    wm_id = int(callback.data.split(":")[1])

    async with SessionLocal() as session:
        result = await session.execute(
            select(Referral).options(
                selectinload(Referral.admin),
                selectinload(Referral.invites)
            ).where(Referral.id == wm_id)
        )
        referral = result.scalar_one_or_none()

    if not referral:
        await callback.message.answer("‚ùå –í–µ–±–º–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return await callback.answer()

    bot_username = (await callback.bot.get_me()).username
    admin_username = (
        f"@{referral.admin.username}" if referral.admin and referral.admin.username
        else f"ID {referral.admin_id}"
    )
    created = referral.created_at.strftime("%d.%m.%Y") if referral.created_at else "‚Äî"

    # üîπ –ó–∞–≥–æ–ª–æ–≤–æ–∫
    text = (
        f"<b>üë§ –í–µ–±–º–∞—Å—Ç–µ—Ä: {referral.tag}</b>\n"
        f"üìå –î–æ–±–∞–≤–∏–ª: {admin_username}\n"
        f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {created}"
        f"\nüß© –°–≤—è–∑–æ–∫ (–±–æ—Ç+–∫–∞–∑–∏–Ω–æ): <b>{len(referral.invites)}</b>"
    )
    await callback.message.answer(text, parse_mode="HTML")

    # üîó –ë–æ—Ç + –∫–∞–∑–∏–Ω–æ
    if referral.invites:
        await callback.message.answer("üîó <b>–°—Å—ã–ª–∫–∏ –Ω–∞ –≤—Ö–æ–¥ –≤ –±–æ—Ç–∞ + –∫–∞–∑–∏–Ω–æ:</b>", parse_mode="HTML")
        for invite in referral.invites:
            invite_text = (
                f"<b>{invite.bot_tag}</b>\n"
                f"<code>https://t.me/{bot_username}?start={invite.bot_tag}</code>\n"
                f"<a href=\"{invite.casino_link}\">{invite.casino_link}</a>"
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∑–∏–Ω–æ", callback_data=f"copy_casino:{invite.id}")],
                [
                    InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"edit_invite:{invite.id}"),
                    InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_invite:{invite.id}")
                ]
            ])

            await callback.message.answer(invite_text, reply_markup=keyboard, parse_mode="HTML", disable_web_page_preview=True)
    else:
        await callback.message.answer("‚ÑπÔ∏è –£ –≤–µ–±–º–∞—Å—Ç–µ—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫ –Ω–∞ –±–æ—Ç–∞ + –∫–∞–∑–∏–Ω–æ.")

    # üîò –î–µ–π—Å—Ç–≤–∏—è –≤–Ω–∏–∑—É
    actions = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞+–∫–∞–∑–∏–Ω–æ", callback_data=f"add_invite_to:{referral.id}")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –≤–µ–±–º–∞—Å—Ç–µ—Ä–∞", callback_data=f"remove_wm_confirm:{referral.id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="webmaster_links")]
    ])
    await callback.message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —ç—Ç–∏–º –≤–µ–±–º–∞—Å—Ç–µ—Ä–æ–º:", reply_markup=actions)
    await callback.answer()



@router.callback_query(F.data.startswith("copy_casino:"))
async def copy_casino_link(callback: CallbackQuery):
    invite_id = int(callback.data.split(":")[1])

    async with SessionLocal() as session:
        invite = await session.get(ReferralInvite, invite_id)

    if not invite:
        await callback.answer("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    await callback.answer(
        f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É:\n{invite.casino_link}",
        show_alert=True
    )

# ---------------------------
# –°–∫—Ä—ã—Ç—ã–µ (–Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–µ–π—á–∞—Å) —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è ReferralLink
# ---------------------------

@router.callback_query(F.data.startswith("edit_link:"))
async def edit_link(callback: CallbackQuery, state: FSMContext):
    link_id = int(callback.data.split(":")[1])
    await state.update_data(editing_link_id=link_id)
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É:")
    await state.set_state(AdminStates.awaiting_new_referral_link)
    await callback.answer()


@router.message(AdminStates.awaiting_new_referral_link)
async def process_link_edit(message: types.Message, state: FSMContext):
    data = await state.get_data()
    link_id = data.get("editing_link_id")
    new_url = message.text.strip()

    async with SessionLocal() as session:
        link = await session.get(ReferralLink, link_id)
        if link:
            link.link = new_url
            await session.commit()
            await message.answer("‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        else:
            await message.answer("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    await state.clear()


@router.callback_query(F.data.startswith("make_main_link:"))
async def make_main_link(callback: CallbackQuery):
    link_id = int(callback.data.split(":")[1])

    async with SessionLocal() as session:
        link = await session.get(ReferralLink, link_id)
        if not link:
            return await callback.message.answer("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

        all_links = await session.execute(
            select(ReferralLink).where(ReferralLink.referral_id == link.referral_id)
        )
        for l in all_links.scalars():
            l.is_main = False

        link.is_main = True
        await session.commit()

    await callback.message.answer("‚≠ê –°—Å—ã–ª–∫–∞ —Å–¥–µ–ª–∞–Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π.")
    await callback.answer()


@router.callback_query(F.data.startswith("delete_link:"))
async def delete_link(callback: CallbackQuery):
    link_id = int(callback.data.split(":")[1])

    async with SessionLocal() as session:
        link = await session.get(ReferralLink, link_id)
        if not link:
            return await callback.message.answer("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

        await session.delete(link)
        await session.commit()

    await callback.message.answer("üóë –°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
    await callback.answer()
