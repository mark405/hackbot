from aiogram import Router, F, types
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from sqlalchemy.future import select
from sqlalchemy.orm import selectinload

from bot.database.db import SessionLocal
from bot.database.models import Admin, Referral
from bot.admin_panel.admin_utils import list_admins, remove_admin
from bot.states.admin_states import AdminStates

router = Router()


# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Ö –≤–µ–±–º–∞—Å—Ç–µ—Ä–æ–≤
@router.callback_query(F.data == "admin_list")
async def show_admin_list(callback: CallbackQuery):
    admins = await list_admins()

    if not admins:
        await callback.message.answer("‚ùóÔ∏è –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç.")
        return await callback.answer()

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"@{admin.username}" if admin.username else f"ID {admin.telegram_id}",
                              callback_data=f"admin_wm_list:{admin.telegram_id}")]
        for admin in admins
    ])

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ –≤–µ–±–º–∞—Å—Ç–µ—Ä–æ–≤:", reply_markup=kb)
    await callback.answer()


# –í–µ–±–º–∞—Å—Ç–µ—Ä–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
@router.callback_query(F.data.startswith("admin_wm_list:"))
async def show_admin_webmasters(callback: CallbackQuery):
    admin_id = int(callback.data.split(":")[1])

    async with SessionLocal() as session:
        result = await session.execute(
            select(Referral)
            .filter_by(admin_id=admin_id)
            .options(selectinload(Referral.links))
        )
        referrals = result.scalars().all()

    if not referrals:
        await callback.message.answer("üì≠ –£ —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –≤–µ–±–º–∞—Å—Ç–µ—Ä–æ–≤.")
        return await callback.answer()

    text_blocks = []
    for ref in referrals:
        main_link = next((l for l in ref.links if l.is_main), None)
        other_links = [l for l in ref.links if not l.is_main]

        block = f"üîπ –í–µ–±–º–∞—Å—Ç–µ—Ä <b>{ref.tag}</b>\n"
        if main_link:
            block += f"‚≠ê –û—Å–Ω–æ–≤–Ω–∞—è: <code>{main_link.link}</code>\n"
        if other_links:
            block += "üìé –î–æ–ø. —Å—Å—ã–ª–∫–∏:\n" + "\n".join(
                [f"üî∏ <code>{l.link}</code>" for l in other_links]
            )
        block += "\n<code>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</code>"
        text_blocks.append(block)

    await callback.message.answer("\n\n".join(text_blocks), parse_mode="HTML")
    await callback.answer()


# –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–≤—ã–±–æ—Ä)
@router.callback_query(F.data == "admin_remove")
async def choose_admin_to_remove(callback: CallbackQuery, state: FSMContext):
    admins = await list_admins()

    if not admins:
        await callback.message.answer("‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ—Ç.")
        return await callback.answer()

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å: {admin.telegram_id} - @{admin.username}", callback_data=f"remove_admin:{admin.telegram_id}")]
        for admin in admins
    ])

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    await callback.answer()


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith("remove_admin:"))
async def confirm_admin_removal(callback: CallbackQuery, state: FSMContext):
    admin_id = int(callback.data.split(":")[1])
    await state.update_data(removing_admin_id=admin_id)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_admin_removal")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin_removal")]
    ])

    await callback.message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å ID {admin_id}?", reply_markup=kb)
    await callback.answer()


# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ
@router.callback_query(F.data == "confirm_admin_removal")
async def remove_admin_confirmed(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    admin_id = data.get("removing_admin_id")

    try:
        await remove_admin(admin_id)
        await callback.message.answer(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {admin_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    except Exception as e:
        await callback.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}")

    await state.clear()
    await callback.answer()


# –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data == "cancel_admin_removal")
async def cancel_admin_removal(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await callback.answer()
