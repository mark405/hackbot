from aiogram import types, Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy.future import select
from sqlalchemy.orm import selectinload
from sqlalchemy import func

from bot.admin_panel.admin_utils import (
    is_admin, remove_admin, list_admins, list_ref_links
)
from bot.database.db import SessionLocal
from bot.database.models import User, Admin, Referral, ReferralLink
from bot.keyboards.admin_keyboards import admin_keyboard
from bot.states.admin_states import AdminStates

import logging

router = Router()

# –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@router.message(Command("hiddenadmin"))
async def admin_start(message: types.Message):
    logging.info(f"[ADMIN PANEL] –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –æ—Ç {message.from_user.id}")

    #  –í—Å—Ç–∞–≤–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:
    print("–¢–≤–æ–π Telegram ID:", message.from_user.id)
    print("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ is_admin:", await is_admin(message.from_user.id))

    try:
        if await is_admin(message.from_user.id):
            await message.answer("‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=admin_keyboard)
            logging.info(f"[ADMIN PANEL] –ê–¥–º–∏–Ω {message.from_user.id} —É—Å–ø–µ—à–Ω–æ –≤–æ—à—ë–ª –≤ –ø–∞–Ω–µ–ª—å.")
        else:
            await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            logging.warning(f"[ADMIN PANEL] –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –±–µ–∑ –ø—Ä–∞–≤ –æ—Ç {message.from_user.id}")
    except Exception as e:
        logging.error(f"[ADMIN PANEL] –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")

#–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥
@router.message(Command("ping"))
async def test_ping(message: types.Message):
    await message.answer(
        f"‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –¢–≤–æ–π Telegram ID: <code>{message.from_user.id}</code>",
        parse_mode="HTML"
    )


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–æ–≤
@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    logging.info("[ADMIN PANEL] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–æ–≤")
    try:
        async with SessionLocal() as session:
            user_count = await session.scalar(select(func.count(User.id)))
            admin_count = await session.scalar(select(func.count(Admin.id)))
        await callback.message.answer(
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{user_count}</b>\n"
            f"üîë –í—Å–µ–≥–æ –∞–¥–º–∏–Ω–æ–≤: <b>{admin_count}</b>",
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"[ADMIN PANEL] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    await callback.answer()

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(F.data == "user_list")
async def user_list(callback: CallbackQuery):
    logging.info("[ADMIN PANEL] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    try:
        async with SessionLocal() as session:
            result = await session.execute(select(User))
            users = result.scalars().all()
        if not users:
            await callback.message.answer("üì≠ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
            return await callback.answer()
        text = "\n".join([
            f"üÜî {user.telegram_id} - @{user.username or '–ë–µ–∑ username'}"
            for user in users
        ])
        await callback.message.answer(f"üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n{text}", parse_mode="HTML")
    except Exception as e:
        logging.error(f"[ADMIN PANEL] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    await callback.answer()

# –ü–æ–º–æ—â—å –ø–æ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@router.message(Command("adminhelp"))
async def admin_help(message: types.Message):
    logging.info(f"[ADMIN PANEL] –ó–∞–ø—Ä–æ—Å —Å–ø—Ä–∞–≤–∫–∏ –æ—Ç {message.from_user.id}")
    if not await is_admin(message.from_user.id):
        return await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    help_text = (
        "üìñ <b>–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏</b>\n\n"
        "üõ†Ô∏è /hiddenadmin ‚Äî –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–æ–≤\n"
        "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "üóÉÔ∏è –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤\n"
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ ‚Äî –ß–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
        "üîó –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ. —Å—Å—ã–ª–æ–∫ ‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ-—Å—Å—ã–ª–∫–∞–º–∏\n"
        "üë∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ–±–º–∞—Å—Ç–µ—Ä–∞–º–∏ ‚Äî –î–æ–±–∞–≤–ª–µ–Ω–∏–µ, —Å—Å—ã–ª–∫–∏, –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ\n"
        "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ–±–º–∞—Å—Ç–µ—Ä–æ–≤ ‚Äî –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤ –∏ —Å—Å—ã–ª–æ–∫\n"
        "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±–º–∞—Å—Ç–µ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤ ‚Äî —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
    )
    await message.answer(help_text, parse_mode="HTML")

# –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ (–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ –≤–µ–±–º–∞—Å—Ç–µ—Ä–∞–º)
@router.callback_query(F.data == "referral_list")
async def show_referral_list(callback: CallbackQuery):
    logging.info("[ADMIN PANEL] –ó–∞–ø—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫")
    try:
        refs = await list_ref_links()
        if refs:
            text = "\n".join([f"üîó {r.link}" for r in refs])
        else:
            text = "üì≠ –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç."
        await callback.message.answer(text)
    except Exception as e:
        logging.error(f"[ADMIN PANEL] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ñ-—Å—Å—ã–ª–æ–∫: {str(e)}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.")
    await callback.answer()

# ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –≤—ã–±–æ—Ä
@router.callback_query(F.data == "remove_ref_link")
async def remove_referral_list(callback: CallbackQuery):
    logging.info("[ADMIN PANEL] –ó–∞–ø—Ä–æ—à–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Ñ-—Å—Å—ã–ª–æ–∫")
    try:
        refs = await list_ref_links()
        if not refs:
            await callback.message.answer("üì≠ –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç.")
            return await callback.answer()

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å: {ref.link}", callback_data=f"delete_link:{ref.id}")]
            for ref in refs
        ])
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    except Exception as e:
        logging.error(f"[ADMIN PANEL] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ-—Å—Å—ã–ª–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫.")
    await callback.answer()

@router.callback_query(F.data.startswith("delete_link:"))
async def delete_referral(callback: CallbackQuery):
    ref_id = int(callback.data.split(":")[1])
    logging.info(f"[ADMIN PANEL] –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ ID {ref_id}")
    try:
        async with SessionLocal() as session:
            referral = await session.get(Referral, ref_id)
            if referral:
                link = referral.link
                await session.delete(referral)
                await session.commit()
                await callback.message.answer(f"‚úÖ –°—Å—ã–ª–∫–∞ {link} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
            else:
                await callback.message.answer("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"[ADMIN PANEL] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏: {str(e)}")
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É.")
    await callback.answer()

# –í—ã–≤–æ–¥ –≤–µ–±–º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ –∞–¥–º–∏–Ω–∞–º
@router.callback_query(F.data == "admin_list")
async def show_admin_list(callback: CallbackQuery):
    admins = await list_admins()

    if not admins:
        await callback.message.answer("‚ùóÔ∏è –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç.")
        return await callback.answer()

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"@{admin.username}" if admin.username else f"ID {admin.telegram_id}",
            callback_data=f"admin_wm_list:{admin.telegram_id}"
        )]
        for admin in admins
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ –≤–µ–±–º–∞—Å—Ç–µ—Ä–æ–≤:", reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data.startswith("admin_wm_list:"))
async def show_admin_webmasters(callback: CallbackQuery):
    admin_id = int(callback.data.split(":")[1])

    async with SessionLocal() as session:
        result = await session.execute(
            select(Referral).filter_by(admin_id=admin_id).options(selectinload(Referral.links))
        )
        referrals = result.scalars().all()

    if not referrals:
        await callback.message.answer("üì≠ –£ —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –≤–µ–±–º–∞—Å—Ç–µ—Ä–æ–≤.")
        return await callback.answer()

    text_blocks = []
    for ref in referrals:
        main_link = next((l for l in ref.links if l.is_main), None)
        other_links = [l for l in ref.links if not l.is_main]

        block = f"üîπ –í–µ–±–º–∞—Å—Ç–µ—Ä <b>{ref.tag}</b>\n"
        if main_link:
            block += f"‚≠ê –û—Å–Ω–æ–≤–Ω–∞—è: <code>{main_link.link}</code>\n"
        if other_links:
            block += "üìé –î–æ–ø. —Å—Å—ã–ª–∫–∏:\n" + "\n".join(
                [f"üî∏ <code>{l.link}</code>" for l in other_links]
            )
        block += "\n<code>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</code>"
        text_blocks.append(block)

    await callback.message.answer("\n\n".join(text_blocks), parse_mode="HTML")
    await callback.answer()

# –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.callback_query(F.data == "admin_remove")
async def choose_admin_to_remove(callback: CallbackQuery, state: FSMContext):
    admins = await list_admins()

    if not admins:
        await callback.message.answer("‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ—Ç.")
        return await callback.answer()

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"–£–¥–∞–ª–∏—Ç—å: {admin.telegram_id} - @{admin.username}",
            callback_data=f"remove_admin:{admin.telegram_id}"
        )]
        for admin in admins
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data.startswith("remove_admin:"))
async def confirm_admin_removal(callback: CallbackQuery, state: FSMContext):
    admin_id = int(callback.data.split(":")[1])
    await state.update_data(removing_admin_id=admin_id)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_admin_removal")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin_removal")]
    ])
    await callback.message.answer(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å ID {admin_id}?",
        reply_markup=kb
    )
    await callback.answer()

@router.callback_query(F.data == "confirm_admin_removal")
async def remove_admin_confirmed(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    admin_id = data.get("removing_admin_id")

    try:
        await remove_admin(admin_id)
        await callback.message.answer(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {admin_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    except Exception as e:
        await callback.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}")

    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "cancel_admin_removal")
async def cancel_admin_removal(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await callback.answer()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ–±–º–∞—Å—Ç–µ—Ä–æ–≤
@router.callback_query(F.data == "webmaster_stats")
async def webmaster_stats(callback: CallbackQuery):
    logging.info("[ADMIN PANEL] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–µ–±–º–∞—Å—Ç–µ—Ä–æ–≤")
    
    async with SessionLocal() as session:
        result = await session.execute(
            select(Referral).options(selectinload(Referral.links))
        )
        referrals = result.scalars().all()

    total_webmasters = len(referrals)
    total_links = sum(len(ref.links) for ref in referrals)

    await callback.message.answer(
        f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ–±–º–∞—Å—Ç–µ—Ä–æ–≤</b>\n\n"
        f"üë∑ –í—Å–µ–≥–æ –≤–µ–±–º–∞—Å—Ç–µ—Ä–æ–≤ (—Ç–µ–≥–æ–≤): <b>{total_webmasters}</b>\n"
        f"üîó –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫ (–æ—Å–Ω–æ–≤–Ω—ã—Ö –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö): <b>{total_links}</b>",
        parse_mode="HTML"
    )
    await callback.answer()

# –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –≤–µ–±–º–∞—Å—Ç–µ—Ä–æ–≤
@router.callback_query(F.data == "webmaster_menu")
async def open_webmaster_menu(callback: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –≤–µ–±–º–∞—Å—Ç–µ—Ä–æ–≤", callback_data="webmaster_links")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–µ–±–º–∞—Å—Ç–µ—Ä–∞", callback_data="add_webmaster")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="edit_webmaster_link")],
        [InlineKeyboardButton(text="üîÅ –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å", callback_data="reassign_webmaster")],
        [InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="webmaster_stats")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")]
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –≤–µ–±–º–∞—Å—Ç–µ—Ä–∞–º–∏:", reply_markup=kb)
    await callback.answer()


# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "admin_back_to_main")
async def back_to_admin_main(callback: CallbackQuery):
    from bot.keyboards.admin_keyboards import admin_keyboard
    await callback.message.edit_text("‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_keyboard)
    await callback.answer()

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–∫–∏
def is_valid_http_url(url: str) -> bool:
    return re.match(r"^https?://", url.strip()) is not None
