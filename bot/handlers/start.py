from aiogram import Bot, Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, WebAppInfo
from aiogram.filters import CommandStart
from sqlalchemy.future import select

from bot.database.db import SessionLocal
from bot.database.models import User, Referral, ReferralInvite
from bot.config import WEBAPP_BASE_URL, REGISTRATION_URL
import logging

router = Router()
awaiting_ids = {}



# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

lang_inline_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
        [InlineKeyboardButton(text="English", callback_data="lang_en")]
    ]
)

reg_inline_keyboard_ru = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üîó –°–°–´–õ–ö–ê –î–õ–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò", callback_data="reg_link_ru")],
        [InlineKeyboardButton(text="‚úÖ –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–õ–°–Ø", callback_data="registered_ru")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_lang")]
    ]
)

reg_inline_keyboard_en = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üîó REGISTER LINK", callback_data="reg_link_en")],
        [InlineKeyboardButton(text="‚úÖ I HAVE REGISTERED", callback_data="registered_en")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data="back_to_lang")]
    ]
)

games_keyboard_ru = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üíé MINES üíé", web_app=WebAppInfo(url=f"{WEBAPP_BASE_URL}/minesexplorer/")),
            InlineKeyboardButton(text="‚öΩ GOAL ‚öΩ", web_app=WebAppInfo(url=f"{WEBAPP_BASE_URL}/goalrush/"))
        ],
        [
            InlineKeyboardButton(text="‚úàÔ∏è AVIATRIX ‚úàÔ∏è", web_app=WebAppInfo(url=f"{WEBAPP_BASE_URL}/aviatrixflymod/")),
            InlineKeyboardButton(text="ü•Ö PENALTY ü•Ö", web_app=WebAppInfo(url=f"{WEBAPP_BASE_URL}/penaltygame/"))
        ],
    ]
)

games_keyboard_en = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üíé MINES üíé", web_app=WebAppInfo(url=f"{WEBAPP_BASE_URL}/minesexplorer-en/")),
            InlineKeyboardButton(text="‚öΩ GOAL ‚öΩ", web_app=WebAppInfo(url=f"{WEBAPP_BASE_URL}/goalrush-en/"))
        ],
        [
            InlineKeyboardButton(text="‚úàÔ∏è AVIATRIX ‚úàÔ∏è", web_app=WebAppInfo(url=f"{WEBAPP_BASE_URL}/aviatrixflymod-en/")),
            InlineKeyboardButton(text="ü•Ö Penalty Shoot-out ü•Ö", web_app=WebAppInfo(url=f"{WEBAPP_BASE_URL}/penaltygame-en/"))
        ],
    ]
)

# –°–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞ 

async def send_start_text(bot: Bot, target, is_edit: bool = False):
    text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç CasinoHackü§ñ\n"
        "Welcome to the CasinoHack signal botü§ñ\n\n"
        "–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –∏ –æ–±—É—á–µ–Ω –Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ ChatGPT-v4.0üß†\n"
        "This bot is created and trained on a ChatGPT-v4.0 neural clusterüß†\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞—è, –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å, —á—Ç–æ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö.\n"
        "By continuing, you agree that all information is for educational purposes only.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose a language üëá"
    )
    if is_edit:
        await target.edit_text(text=text, reply_markup=lang_inline_keyboard)
    else:
        await bot.send_message(chat_id=target, text=text, reply_markup=lang_inline_keyboard)

async def send_access_granted_message(bot: Bot, message: Message, user_lang: str):
    keyboard = games_keyboard_en if user_lang == "en" else games_keyboard_ru
    text = (
        "‚úÖ ACCESS GRANTED ‚úÖ\n\n"
        "üî¥ Instructions:\n"
        "1Ô∏è‚É£ Select a game below\n"
        "2Ô∏è‚É£ Open it on the site\n"
        "3Ô∏è‚É£ Get the signal and follow it in the game ‚ûï üêù"
    ) if user_lang == "en" else (
        "‚úÖ –î–û–°–¢–£–ü –û–¢–ö–†–´–¢ ‚úÖ\n\n"
        "üî¥ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
        "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –Ω–∏–∂–µ\n"
        "2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –µ—ë –Ω–∞ —Å–∞–π—Ç–µ\n"
        "3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Å–∏–≥–Ω–∞–ª –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ–≥–æ –≤ –∏–≥—Ä–µ ‚ûï üêù"
    )
    await message.answer(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start 

@router.message(CommandStart())
async def start_handler(message: Message):
    try:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç CasinoHackü§ñ\n"
            "Welcome to the CasinoHack signal botü§ñ\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞—è, –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å, —á—Ç–æ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö.\n"
            "By continuing, you agree that all information is for educational purposes only.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose a language üëá",
            reply_markup=lang_inline_keyboard
        )

        parts = message.text.split(maxsplit=1)
        if len(parts) > 1:
            bot_tag = parts[1].strip()
            async with SessionLocal() as session:
                invite_result = await session.execute(
                    select(ReferralInvite).filter_by(bot_tag=bot_tag)
                )
                invite = invite_result.scalar_one_or_none()

                if invite:
                    await session.refresh(invite)
                    referral = await session.get(Referral, invite.referral_id)
                    if referral:
                        user_result = await session.execute(
                            select(User).filter_by(telegram_id=message.from_user.id)
                        )
                        user = user_result.scalar()

                        if not user:
                            user = User(
                                telegram_id=message.from_user.id,
                                username=message.from_user.username,
                                ref_tag=referral.tag,
                                bot_tag=bot_tag
                            )
                        else:
                            user.ref_tag = referral.tag
                            user.bot_tag = bot_tag

                        session.add(user)
                        await session.commit()

                        logging.info(
                            f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—Ä–∏—à—ë–ª –ø–æ —Å—Å—ã–ª–∫–µ: /start={bot_tag}. "
                            f"–ö–∞–∑–∏–Ω–æ: {invite.casino_link}"
                        )
                    else:
                        logging.warning(f"‚ö†Ô∏è Invite –Ω–∞–π–¥–µ–Ω, –Ω–æ Referral –Ω–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    logging.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—Ä–∏—à—ë–ª —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º bot_tag: {bot_tag}")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /start: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.")


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É 
@router.callback_query(F.data.in_(["reg_link_ru", "reg_link_en"]))
async def send_registration_link(callback: CallbackQuery):
    await callback.answer()
    lang = "ru" if callback.data == "reg_link_ru" else "en"

    async with SessionLocal() as session:
        user_result = await session.execute(
            select(User).filter_by(telegram_id=callback.from_user.id)
        )
        user = user_result.scalar()

        referral_link = REGISTRATION_URL  # fallback
        if user and user.bot_tag:
            invite_result = await session.execute(
                select(ReferralInvite).filter_by(bot_tag=user.bot_tag)
            )
            invite = invite_result.scalar_one_or_none()
            if invite:
                referral_link = invite.casino_link

        text = (
            f"–í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {referral_link}"
            if lang == "ru"
            else f"Here is the registration link: {referral_link}"
        )
        await callback.message.answer(text)

#  –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ 

@router.callback_query(F.data == "registered_ru")
async def registered_ru(callback: CallbackQuery):
    await callback.answer()
    awaiting_ids[callback.from_user.id] = {"awaiting": True, "lang": "ru"}
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")

@router.callback_query(F.data == "registered_en")
async def registered_en(callback: CallbackQuery):
    await callback.answer()
    awaiting_ids[callback.from_user.id] = {"awaiting": True, "lang": "en"}
    await callback.message.answer("Enter the ID of your new account (numbers only)")


#  –í—ã–±–æ—Ä —è–∑—ã–∫–∞ 

@router.callback_query(F.data == "lang_ru")
async def lang_ru_selected(callback: CallbackQuery):
    await callback.answer()
    async with SessionLocal() as session:
        user_result = await session.execute(select(User).filter_by(telegram_id=callback.from_user.id))
        user = user_result.scalar()

        if user:
            user.language = "ru"
            await session.commit()

    await callback.message.edit_text(
        "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –Ω–æ–≤—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –ø–æ —Å—Å—ã–ª–∫–µ.\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).\n\n"
        "–°—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ üëá",
        reply_markup=reg_inline_keyboard_ru
    )

@router.callback_query(F.data == "lang_en")
async def lang_en_selected(callback: CallbackQuery):
    await callback.answer()
    async with SessionLocal() as session:
        user_result = await session.execute(select(User).filter_by(telegram_id=callback.from_user.id))
        user = user_result.scalar()

        if user:
            user.language = "en"
            await session.commit()

    await callback.message.edit_text(
        "This bot works only with newly created accounts registered via the link below.\n\n"
        "Please register a new account and send your ID (numbers only) to the bot.\n\n"
        "Registration link üëá",
        reply_markup=reg_inline_keyboard_en
    )


# –ù–∞–∑–∞–¥ –≤ –≤—ã–±–æ—Ä —è–∑—ã–∫–∞

@router.callback_query(F.data == "back_to_lang")
async def back_to_language(callback: CallbackQuery):
    await callback.answer()
    await send_start_text(bot=callback.bot, target=callback.message, is_edit=True)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@router.message()
async def process_user_message(message: Message):
    if message.text.startswith("/"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        print(f"‚ùì –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {message.text}")
        await message.answer("‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        return

    user_data = awaiting_ids.get(message.from_user.id)
    if not user_data or not user_data.get("awaiting"):
        return

    lang = user_data.get("lang", "ru")
    bot = message.bot

    if not message.text.isdigit():
        await message.answer("‚ùå Error: Please enter numbers only." if lang == "en" else "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
        return

    user_id = message.text.strip()
    if not (
        (len(user_id) == 9 and user_id.startswith("23")) or
        (len(user_id) == 7 and user_id.startswith("4"))
    ):
        await message.answer("‚ùå Error: Please enter a valid ID." if lang == "en" else "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")
        return

    await message.answer("üîç Checking ID in the database..." if lang == "en" else "üîç –ü—Ä–æ–≤–µ—Ä—è—é ID –≤ –±–∞–∑–µ...")
    await send_access_granted_message(bot, message, lang)
    awaiting_ids.pop(message.from_user.id, None)



#  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–ª–±—ç–∫–∏ 

@router.callback_query()
async def catch_unhandled_callbacks(callback: CallbackQuery):
    known_callbacks = [
        "registered_ru", "registered_en", "reg_link_ru", "reg_link_en",
        "lang_ru", "lang_en", "back_to_lang",
        "admin_stats", "admin_add", "admin_remove", "user_list",
        "admin_list", "add_ref_link", "remove_ref_link", "referral_stats"
    ]

    if callback.data not in known_callbacks:
        await callback.answer()

        async with SessionLocal() as session:
            user_result = await session.execute(select(User).filter_by(telegram_id=callback.from_user.id))
            user = user_result.scalar()

        lang = user.language if user else "ru"
        text = "You clicked an unknown button!" if lang == "en" else "–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É!"
        await callback.message.answer(text)
