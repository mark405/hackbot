from aiogram import Router, F, types
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from sqlalchemy.future import select
from sqlalchemy.orm import selectinload

from bot.database.db import SessionLocal
from bot.database.models import Referral, Admin
from bot.states.admin_states import AdminStates
import logging

router = Router()


# üóë –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±–º–∞—Å—Ç–µ—Ä–∞ (–≤—ã–±–æ—Ä)
@router.callback_query(F.data == "remove_webmaster")
async def choose_webmaster_to_remove(callback: CallbackQuery):
    logging.info("[ADMIN PANEL] –ó–∞–ø—Ä–æ—à–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±–º–∞—Å—Ç–µ—Ä–∞")

    async with SessionLocal() as session:
        result = await session.execute(select(Referral))
        referrals = result.scalars().all()

    if not referrals:
        await callback.message.answer("üì≠ –°–ø–∏—Å–æ–∫ –≤–µ–±–º–∞—Å—Ç–µ—Ä–æ–≤ –ø—É—Å—Ç.")
        return await callback.answer()

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å: {ref.tag}", callback_data=f"remove_wm_confirm:{ref.id}")]
        for ref in referrals
    ])

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ–±–º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    await callback.answer()


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith("remove_wm_confirm:"))
async def confirm_webmaster_removal(callback: CallbackQuery):
    ref_id = int(callback.data.split(":")[1])

    logging.info(f"[ADMIN PANEL] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±–º–∞—Å—Ç–µ—Ä–∞ ID {ref_id}")

    async with SessionLocal() as session:
        referral = await session.get(Referral, ref_id)

        if referral:
            tag = referral.tag
            await session.delete(referral)
            await session.commit()
            await callback.message.answer(f"‚úÖ –í–µ–±–º–∞—Å—Ç–µ—Ä {tag} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.", parse_mode="Markdown")
        else:
            await callback.message.answer("‚ùå –í–µ–±–º–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await callback.answer()


# –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ–±–º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.callback_query(F.data == "reassign_webmaster")
async def choose_webmaster_to_reassign(callback: CallbackQuery, state: FSMContext):
    async with SessionLocal() as session:
        result = await session.execute(
            select(Referral).options(selectinload(Referral.links))
        )
        referrals = result.scalars().all()

    if not referrals:
        await callback.message.answer("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –≤–µ–±–º–∞—Å—Ç–µ—Ä–æ–≤ –ø—É—Å—Ç.")
        return await callback.answer()

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"{ref.tag} ({ref.links[0].link[:25]}...)" if ref.links else f"{ref.tag} (–±–µ–∑ —Å—Å—ã–ª–æ–∫)",
            callback_data=f"reassign_ref:{ref.id}")]
        for ref in referrals
    ])

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ–±–º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:", reply_markup=kb)
    await callback.answer()


@router.callback_query(F.data.startswith("reassign_ref:"))
async def ask_for_new_admin(callback: CallbackQuery, state: FSMContext):
    referral_id = int(callback.data.split(":")[1])
    await state.update_data(referral_id_to_reassign=referral_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    await state.set_state(AdminStates.awaiting_new_admin_id)
    await callback.answer()


@router.message(AdminStates.awaiting_new_admin_id)
async def process_admin_reassignment(message: types.Message, state: FSMContext):
    new_admin_id = message.text.strip()

    if not new_admin_id.isdigit():
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    data = await state.get_data()
    referral_id = data.get("referral_id_to_reassign")

    async with SessionLocal() as session:
        referral = await session.get(Referral, referral_id)

        if not referral:
            await message.answer("‚ùå –í–µ–±–º–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        admin = await session.scalar(select(Admin).filter_by(telegram_id=int(new_admin_id)))
        if not admin:
            await message.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        referral.admin_id = int(new_admin_id)
        await session.commit()

    await message.answer(f"‚úÖ –í–µ–±–º–∞—Å—Ç–µ—Ä {referral.tag} –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∞–¥–º–∏–Ω–∞ —Å ID {new_admin_id}.", parse_mode="Markdown")
    await state.clear()


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ–±–º–∞—Å—Ç–µ—Ä–æ–≤
@router.callback_query(F.data == "webmaster_stats")
async def webmaster_stats(callback: CallbackQuery):
    logging.info("[ADMIN PANEL] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–µ–±–º–∞—Å—Ç–µ—Ä–æ–≤")
    
    async with SessionLocal() as session:
        result = await session.execute(
            select(Referral).options(selectinload(Referral.links))
        )
        referrals = result.scalars().all()

    total_webmasters = len(referrals)
    total_links = sum(len(ref.links) for ref in referrals)

    await callback.message.answer(
        f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ–±–º–∞—Å—Ç–µ—Ä–æ–≤</b>\n\n"
        f"üë∑ –í—Å–µ–≥–æ –≤–µ–±–º–∞—Å—Ç–µ—Ä–æ–≤ (—Ç–µ–≥–æ–≤): <b>{total_webmasters}</b>\n"
        f"üîó –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫ (–æ—Å–Ω–æ–≤–Ω—ã—Ö –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö): <b>{total_links}</b>",
        parse_mode="HTML"
    )

    await callback.answer()
