from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram.filters import Command
from sqlalchemy.future import select
import logging
import re

from bot.database.db import SessionLocal
from bot.database.models import Referral, ReferralInvite
from bot.states.admin_states import AdminStates

router = Router()

# –°—Ç–∞—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–µ–±–º–∞—Å—Ç–µ—Ä–∞
@router.callback_query(lambda c: c.data == "add_webmaster")
async def add_webmaster_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –≤–µ–±–º–∞—Å—Ç–µ—Ä–∞ (–±—É–∫–≤—ã –∏/–∏–ª–∏ —Ü–∏—Ñ—Ä—ã):")
    await state.set_state(AdminStates.awaiting_webmaster_id)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–≥–∞ –≤–µ–±–º–∞—Å—Ç–µ—Ä–∞
@router.message(AdminStates.awaiting_webmaster_id)
async def process_webmaster_id(message: types.Message, state: FSMContext):
    tag = message.text.strip()

    if not tag.isalnum():
        await message.answer("‚ùå –¢–µ–≥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏/–∏–ª–∏ —Ü–∏—Ñ—Ä—ã. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    await state.update_data(webmaster_tag=tag)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–∑–∏–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –≤–µ–±–º–∞—Å—Ç–µ—Ä–∞:")
    await state.set_state(AdminStates.awaiting_webmaster_link)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±–º–∞—Å—Ç–µ—Ä–∞ + –ø–µ—Ä–≤–æ–π —Å–≤—è–∑–∫–∏
@router.message(AdminStates.awaiting_webmaster_link)
async def process_webmaster_link(message: types.Message, state: FSMContext):
    casino_link = message.text.strip()
    data = await state.get_data()
    tag = data.get("webmaster_tag")
    admin_id = message.from_user.id

    logging.info(f"[ADMIN PANEL] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ–±–º–∞—Å—Ç–µ—Ä–∞ {tag} —Å –ø–µ—Ä–≤–æ–π —Å—Å—ã–ª–∫–æ–π {casino_link}")

    async with SessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–≥–∞
        existing = await session.scalar(select(Referral).filter_by(tag=tag))
        if existing:
            await message.answer("‚ùóÔ∏è –í–µ–±–º–∞—Å—Ç–µ—Ä —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            await state.clear()
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±–º–∞—Å—Ç–µ—Ä–∞
        referral = Referral(tag=tag, admin_id=admin_id)
        session.add(referral)
        await session.flush()

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å–≤—è–∑–∫–∏ bot + –∫–∞–∑–∏–Ω–æ
        first_bot_tag = f"{tag}_01"
        first_invite = ReferralInvite(
            referral_id=referral.id,
            bot_tag=first_bot_tag,
            casino_link=casino_link,
            is_main=True
        )
        session.add(first_invite)
        await session.commit()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
    bot_username = (await message.bot.get_me()).username
    await message.answer(
        f"‚úÖ –í–µ–±–º–∞—Å—Ç–µ—Ä <code>{tag}</code> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å –ø–µ—Ä–≤–æ–π —Å–≤—è–∑–∫–æ–π:\n\n"
        f"<code>{first_bot_tag}</code>\n"
        f"<a href=\"https://t.me/{bot_username}?start={first_bot_tag}\">https://t.me/{bot_username}?start={first_bot_tag}</a>\n"
        f"<a href=\"{casino_link}\">{casino_link}</a>",
        parse_mode="HTML", disable_web_page_preview=True
    )

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    back_kb = types.InlineKeyboardMarkup(inline_keyboard=[
    [types.InlineKeyboardButton(text=f"üìÇ –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É {tag}", callback_data=f"wm_links:{referral.id}")],
    [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–µ–±–º–∞—Å—Ç–µ—Ä–∞–º", callback_data="webmaster_links")]
])

    await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=back_kb)

    await state.clear()
